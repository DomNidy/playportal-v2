drop function if exists "public"."create_upload_video_operation"(user_id uuid, created_from_operation_id uuid, using_oauth_creds_id uuid, metadata jsonb);

drop view if exists "public"."user_products";

create table "public"."upload_operation_logs" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "message" operation_logs_enum,
    "upload_operation_id" uuid
);


alter table "public"."upload_operation_logs" enable row level security;

create table "public"."upload_video_options" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "options" jsonb
);


alter table "public"."upload_video_options" enable row level security;

alter table "public"."operation_logs" alter column "message" set not null;

alter table "public"."operation_logs" alter column "message" set data type operation_logs_enum using "message"::operation_logs_enum;

alter table "public"."upload_video_operations" add column "upload_options_id" uuid not null;

CREATE UNIQUE INDEX upload_operation_logs_pkey ON public.upload_operation_logs USING btree (id);

CREATE UNIQUE INDEX upload_video_operations_upload_options_id_key ON public.upload_video_operations USING btree (upload_options_id);

CREATE UNIQUE INDEX upload_video_options_pkey ON public.upload_video_options USING btree (id);

CREATE UNIQUE INDEX user_roles_user_id_key ON public.user_roles USING btree (user_id);

alter table "public"."upload_operation_logs" add constraint "upload_operation_logs_pkey" PRIMARY KEY using index "upload_operation_logs_pkey";

alter table "public"."upload_video_options" add constraint "upload_video_options_pkey" PRIMARY KEY using index "upload_video_options_pkey";

alter table "public"."upload_operation_logs" add constraint "upload_operation_logs_upload_operation_id_fkey" FOREIGN KEY (upload_operation_id) REFERENCES upload_video_operations(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."upload_operation_logs" validate constraint "upload_operation_logs_upload_operation_id_fkey";

alter table "public"."upload_video_operations" add constraint "upload_video_operations_upload_options_id_fkey" FOREIGN KEY (upload_options_id) REFERENCES upload_video_options(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."upload_video_operations" validate constraint "upload_video_operations_upload_options_id_fkey";

alter table "public"."upload_video_operations" add constraint "upload_video_operations_upload_options_id_key" UNIQUE using index "upload_video_operations_upload_options_id_key";

alter table "public"."user_roles" add constraint "user_roles_user_id_key" UNIQUE using index "user_roles_user_id_key";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.create_upload_video_operation(p_user_id uuid, p_upload_video_options jsonb, p_created_from_operation_id uuid, p_using_oauth_creds_id uuid)
 RETURNS TABLE(upload_operation_id uuid, upload_options_id uuid, trans_id uuid)
 LANGUAGE plpgsql
AS $function$DECLARE
    v_trans_id UUID;
    v_upload_operation_id UUID;
    v_upload_options_id UUID;
BEGIN
    -- Create transaction record
    INSERT INTO public.transactions (user_id, type)
    VALUES (p_user_id, 'UploadYoutubeVideo')
    RETURNING id INTO v_trans_id;

    -- Create video options document
    INSERT INTO public.upload_video_options (options)
    VALUES (p_upload_video_options)
    RETURNING id INTO v_upload_options_id;

    -- Create operation document
    INSERT INTO public.upload_video_operations (
        create_operation_id, upload_platform, oauth_creds_id, upload_options_id)
    VALUES (p_created_from_operation_id, 'YouTube', p_using_oauth_creds_id, v_upload_options_id)
    RETURNING id INTO v_upload_operation_id;

    -- Return the results
    RETURN QUERY 
    SELECT v_upload_operation_id, v_upload_options_id, v_trans_id;

EXCEPTION
    WHEN OTHERS THEN
        -- Handle exceptions, optionally log error
        RAISE EXCEPTION 'An error occurred: %', SQLERRM;
END;$function$
;

CREATE OR REPLACE FUNCTION public.update_upload_operation_metadata(operation_id uuid, new_metadata jsonb)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
begin
    update upload_video_operations
    set metadata = metadata || new_metadata
    where id = operation_id;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
    INSERT INTO public.user_data (id, full_name, avatar_url)
    VALUES (NEW.id, NEW.raw_user_meta_data->>'full_name', NEW.raw_user_meta_data->>'avatar_url');


    INSERT INTO public.user_roles (user_id, granted_role)
    VALUES (NEW.id, 'free_plan');
    
    RETURN NEW;
END;$function$
;

create or replace view "public"."user_products" as  SELECT ur.user_id,
    r.id AS role_id,
    r.create_video_daily_quota,
    r.file_size_limit_mb,
    r.upload_youtube_daily_quota,
    p.id AS prod_id,
    p.active AS product_is_active,
    p.name AS product_name,
    p.description AS product_description,
    p.image AS product_image,
    p.metadata AS product_metadata,
    s.status AS sub_status,
    s.id AS sub_id,
    s.cancel_at_period_end AS cancel_sub_at_period_end,
    s.created AS sub_created,
    s.current_period_start AS sub_current_period_start,
    s.current_period_end AS sub_current_period_end,
    s.ended_at AS sub_ended_at,
    s.cancel_at AS sub_cancel_at,
    s.canceled_at AS sub_canceled_at,
    s.trial_start AS sub_trial_start,
    s.trial_end AS sub_trial_end,
    pr.id,
    pr.product_id,
    pr.active,
    pr.description,
    pr.unit_amount,
    pr.currency,
    pr.type,
    pr."interval",
    pr.interval_count,
    pr.trial_period_days,
    pr.metadata
   FROM ((((user_roles ur
     JOIN roles r ON ((r.id = ur.granted_role)))
     JOIN products p ON ((p.id = r.for_plan)))
     LEFT JOIN prices pr ON ((pr.product_id = p.id)))
     LEFT JOIN subscriptions s ON ((s.price_id = pr.id)));


grant delete on table "public"."upload_operation_logs" to "anon";

grant insert on table "public"."upload_operation_logs" to "anon";

grant references on table "public"."upload_operation_logs" to "anon";

grant select on table "public"."upload_operation_logs" to "anon";

grant trigger on table "public"."upload_operation_logs" to "anon";

grant truncate on table "public"."upload_operation_logs" to "anon";

grant update on table "public"."upload_operation_logs" to "anon";

grant delete on table "public"."upload_operation_logs" to "authenticated";

grant insert on table "public"."upload_operation_logs" to "authenticated";

grant references on table "public"."upload_operation_logs" to "authenticated";

grant select on table "public"."upload_operation_logs" to "authenticated";

grant trigger on table "public"."upload_operation_logs" to "authenticated";

grant truncate on table "public"."upload_operation_logs" to "authenticated";

grant update on table "public"."upload_operation_logs" to "authenticated";

grant delete on table "public"."upload_operation_logs" to "service_role";

grant insert on table "public"."upload_operation_logs" to "service_role";

grant references on table "public"."upload_operation_logs" to "service_role";

grant select on table "public"."upload_operation_logs" to "service_role";

grant trigger on table "public"."upload_operation_logs" to "service_role";

grant truncate on table "public"."upload_operation_logs" to "service_role";

grant update on table "public"."upload_operation_logs" to "service_role";

grant delete on table "public"."upload_video_options" to "anon";

grant insert on table "public"."upload_video_options" to "anon";

grant references on table "public"."upload_video_options" to "anon";

grant select on table "public"."upload_video_options" to "anon";

grant trigger on table "public"."upload_video_options" to "anon";

grant truncate on table "public"."upload_video_options" to "anon";

grant update on table "public"."upload_video_options" to "anon";

grant delete on table "public"."upload_video_options" to "authenticated";

grant insert on table "public"."upload_video_options" to "authenticated";

grant references on table "public"."upload_video_options" to "authenticated";

grant select on table "public"."upload_video_options" to "authenticated";

grant trigger on table "public"."upload_video_options" to "authenticated";

grant truncate on table "public"."upload_video_options" to "authenticated";

grant update on table "public"."upload_video_options" to "authenticated";

grant delete on table "public"."upload_video_options" to "service_role";

grant insert on table "public"."upload_video_options" to "service_role";

grant references on table "public"."upload_video_options" to "service_role";

grant select on table "public"."upload_video_options" to "service_role";

grant trigger on table "public"."upload_video_options" to "service_role";

grant truncate on table "public"."upload_video_options" to "service_role";

grant update on table "public"."upload_video_options" to "service_role";


