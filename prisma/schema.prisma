// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    // Enabling multiSchema so we can use supabase auth in prisma
    previewFeatures = ["multiSchema"]
}

// Integration with supabase: https://supabase.com/partners/integrations/prisma
datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
    // Specifying the database schemas we want to include in prisma
    schemas   = ["public", "auth"]
}

model User {
    id           String         @id @default(uuid())
    full_name    String
    avatar_url   String?
    createdAt    DateTime       @default(now())
    credits      Int            @default(0)
    Transaction  Transaction[]
    FileMetadata FileMetadata[]

    // Specify what schema a model or enum belongs to using @@schemaa attribute
    @@schema("public")
}

enum TransactionType {
    CreateVideo
    GenerateImage

    @@schema("public")
}

model Transaction {
    id     String          @id @default(uuid())
    amount Int
    type   TransactionType

    // Creates a relation between user by the user_id property on this table, and the user.id property on User table
    user      User?      @relation(fields: [user_id], references: [id], onDelete: SetNull)
    user_id   String?
    Operation Operation?

    @@schema("public")
}

enum FileOrigin {
    UserProvided // If the user uploaded the resource themself
    PlayportalBackend // If we used a resource that was produced by our backend, such as default image, or ai generated

    @@schema("public")
}

enum FileType {
    Audio
    Image

    @@schema("public")
}

model FileMetadata {
    // The key to the file in s3 bucket
    fileKey String @id

    // What type of file is stored?
    file_type FileType

    user    User?   @relation(fields: [user_id], references: [id], onDelete: SetNull)
    user_id String?

    @@schema("public")
}

// Represents an operation to create a video
model Operation {
    id String @id @default(uuid())

    // One to one relationship with transaction (each operation can only be incident to a single transaction)
    transaction    Transaction?   @relation(fields: [transaction_id], references: [id], onDelete: SetNull)
    transaction_id String?        @unique
    OperationLog   OperationLog[]

    @@schema("public")
}

// Represents a log from an operation
// We will listen for changes to this using supabase realtime
model OperationLog {
    id        String   @id @default(uuid())
    log       String
    createdAt DateTime @default(now())

    operation    Operation @relation(fields: [operation_id], references: [id], onDelete: Cascade)
    operation_id String

    @@schema("public")
}
